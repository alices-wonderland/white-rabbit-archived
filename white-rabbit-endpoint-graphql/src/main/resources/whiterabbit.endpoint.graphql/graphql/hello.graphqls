scalar DateTime
scalar Long

type Book {
  id: ID!
  version: Long!
  name: String!
  author: User!
}

type User {
  id: ID!
  version: Long!
  name: String!
  manager: User
  books(first: Int, after: String, last: Int, before: String, filter: String!, sort: [Order!]!): BookConnection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  firstCursor: String
  lastCursor: String
}

type BookNode {
  cursor: String!
  item: Book!
}

type BookConnection {
  pageInfo: PageInfo!
  items: [BookNode!]!
}

input Order {
  direction: Direction!
  property: String!
}

enum Direction {
  ASC, DESC
}

type Query {
  user(id: ID!): User
}
